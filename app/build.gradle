apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'newlens'

// 时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

// 打正式包命令 gradlew assembleRelease
// 打debug包命令 gradlew assembleDebug
android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.brian.csdnblog"
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            stl "gnustl_static"
            abiFilters "armeabi-v7a"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        debug {
            storeFile file("../release/debug.keystore")
        }
        release {
            storeFile file("../release/brian.keystore")
            storePassword 'brian512'
            keyAlias '年少的风'
            keyPassword 'brian512'
        }
    }
    buildTypes {
        // 打测试包
        debug{
            // 显示Log
            buildConfigField "boolean", "DEBUG_ENABLE", "true"
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        // 打正式包
        release {
            // 不显示Log
            buildConfigField "boolean", "DEBUG_ENABLE", "false"
            // 启用混淆
            minifyEnabled false
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 签名
            signingConfig signingConfigs.release

            // 修改文件名
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为CodeBlog_v1.0_2016-07-31_wandoujia.apk
                        def fileName = "CodeBlog_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk" //_${releaseTime()}
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    //这个是解决lint报错的代码
    lintOptions {
        abortOnError false
        // 防止在发布的时候出现因MissingTranslation导致Build Failed!
        disable 'MissingTranslation'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs = ['src/main/res', 'src/main/res/anim']
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
        preDexLibraries = false
    }

    aaptOptions {
        noCompress 'foo', 'bar'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    lintOptions {
        abortOnError false
    }

    // 配置渠道包
    productFlavors {
        MAIN {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "MAIN"]
        }

        BAIDU {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "BAIDU"]
        }

        QIHU360 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "QIHU360"]
        }

        XIAOMI {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "XIAOMI"]
        }

        YINGYONGBAO {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "YINGYONGBAO"]
        }
    }
}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile 'com.google.android.gms:play-services-analytics:10.2.1'
    compile 'com.google.firebase:firebase-ads:10.2.1'

    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.picasso:picasso:2.5.2'

    compile 'com.jakewharton:butterknife:8.4.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'

    compile "com.android.support:design:${SUPPORT_LIBRARY}"
    compile "com.android.support:support-v4:${SUPPORT_LIBRARY}"
    compile 'pub.devrel:easypermissions:0.2.0'
    compile 'me.imid.swipebacklayout.lib:library:1.0.0'

    compile "com.networkbench.newlens.agent.android:nbs.newlens.agent:2.5.3"

    compile 'com.oasisfeng.condom:library:1.1.1'
}
apply plugin: 'com.google.gms.google-services'